plugins {
    id 'groovy'
    id 'maven'
    id 'signing'
    id 'codenarc'
    id 'com.gradle.plugin-publish' version '0.9.4'
    id 'java-gradle-plugin'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14-rc-1'
}

repositories {
    // using JCenter for dependency resolution is recommended, see https://plugins.gradle.org/docs/publish-plugin
    jcenter()
}

sourceCompatibility = '1.6'

dependencies {
    compile gradleApi()
    compile 'org.jvnet.localizer:maven-localizer-plugin:1.13'
    compile 'org.jenkins-ci:version-number:1.0'
    compile 'net.java.sezpoz:sezpoz:1.9'
    compile localGroovy()
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all' // use the version that is distributed with Gradle
    }
    testCompile 'xmlunit:xmlunit:1.6'
}

artifacts {
    archives jar
}

signing {
    required { !version.toString().endsWith('SNAPSHOT') && gradle.taskGraph.hasTask(tasks.uploadArchives) }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            pom.project {
                name 'Gradle JPI Plugin'
                packaging 'jar'
                description 'The Gradle JPI plugin is a Gradle plugin for building Jenkins plugins'
                url 'http://github.com/jenkinsci/gradle-jpi-plugin'

                scm {
                    url 'https://github.com/jenkinsci/gradle-jpi-plugin'
                }

                licenses {
                    license {
                        name 'Apache 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'abayer'
                        name 'Andrew Bayer'
                    }
                    developer {
                        id 'kohsuke'
                        name 'Kohsuke Kawaguchi'
                    }
                    developer {
                        id 'daspilker'
                        name 'Daniel Spilker'
                    }
                }
            }

            //mess with the generated pom to set the 'packaging' tag
            pom.withXml { XmlProvider xmlProvider ->
                def xml = xmlProvider.asString()
                def pomXml = new XmlParser().parse(new ByteArrayInputStream(xml.toString().bytes))

                pomXml.version[0] + { packaging('jar') }

                def newXml = new StringWriter()
                def printer = new XmlNodePrinter(new PrintWriter(newXml))
                printer.preserveWhitespace = true
                printer.print(pomXml)
                xml.setLength(0)
                xml.append(newXml.toString())
            }
        }
    }
}

codenarc {
    toolVersion = '0.24'
    configFile = file('config/codenarc/rules.groovy')
}

codenarcTest {
    configFile = file('config/codenarc/rules-test.groovy')
}

test {
    jvmArgs += ['-XX:MaxPermSize=256m']
}

group = 'org.jenkins-ci.tools'
archivesBaseName = 'gradle-jpi-plugin'
description = 'Gradle plugin for building and packaging Jenkins plugins'

pluginBundle {
    website = 'https://wiki.jenkins-ci.org/display/JENKINS/Gradle+JPI+Plugin'
    vcsUrl = 'https://github.com/jenkinsci/gradle-jpi-plugin'
    description = 'A plugin for building Jenkins plugins'
    tags = ['jenkins']

    plugins {
        jpiPlugin {
            id = 'org.jenkins-ci.jpi'
            displayName = 'JPI plugin'
        }
    }
}

gradlePlugin {
    plugins {
        jpiPlugin {
            id = 'org.jenkins-ci.jpi'
            implementationClass = 'org.jenkinsci.gradle.plugins.jpi.JpiPlugin'
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(uploadArchives)) {
        uploadArchives {
            repositories {
                mavenDeployer {
                    def credentials = loadCredentialsForJenkinsCommunityRepository()
                    repository(url: 'https://repo.jenkins-ci.org/releases') {
                        authentication(credentials)
                    }
                    snapshotRepository(url: 'https://repo.jenkins-ci.org/snapshots') {
                        authentication(credentials)
                    }
                }
            }
        }
    }
    if (taskGraph.allTasks.any { it instanceof Sign && it.required }) {
        Console console = System.console()
        console.printf '\n\nWe have to sign some things in this build.\n\n'

        def password = console.readPassword('PGP Private Key Password: ')

        allprojects { ext.'signing.password' = password }

        console.printf '\nThanks.\n\n'
    }
}

private loadCredentialsForJenkinsCommunityRepository() {
    def dotFile = new File(System.getProperty('user.home'), '.jenkins-ci.org')

    if (!dotFile.exists()) {
        throw new Exception(
                "Trying to deploy to Jenkins community repository but there's no credential file ${dotFile}." +
                        ' See https://wiki.jenkins-ci.org/display/JENKINS/Dot+Jenkins+Ci+Dot+Org'
        )
    }

    def props = new Properties()
    dotFile.withInputStream { props.load(it) }
    [userName: props.userName, password: props.password]
}
